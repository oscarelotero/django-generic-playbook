---

- hosts: all

  roles:
  #- Stouts.python
  - build-essential

  tasks:
    - include_vars: system_requirements.yml

    - name: Install system packages.
      become: yes
      apt: name={{ item }} state=present
      with_items: system_requirements

    - name: Copy SSL files
      become: yes
      copy:
        src: ~/Dropbox/ops/ssl/
        dest: /etc/nginx/cert/

    - name: Copy Default nginx config file
      become: yes
      copy:
        src: config_files/nginx_default
        dest: /etc/nginx/sites-available/default

    - name: Copy nginx config file
      become: yes
      template:
        src: config_files/nginx
        dest: /etc/nginx/sites-available/{{ app_name }}
      when: nginx_conf is undefined
      notify:
      - Restart nginx

    - name: Copy specific nginx config file
      become: yes
      template:
        src: "{{ nginx_conf }}"
        dest: /etc/nginx/sites-available/{{ app_name }}
      when: nginx_conf is defined
      notify:
      - Restart nginx

    - name: Copy uwsgi config file
      become: yes
      template:
        src: config_files/uwsgi.ini
        dest: /etc/uwsgi/apps-available/{{ app_name }}.ini
      notify:
      - Restart nginx

    - name: Create symlink for nginx default
      become: yes
      file:
        src: /etc/nginx/sites-available/default
        dest: /etc/nginx/sites-enabled/default
        state: link
      notify:
      - Restart uwsgi

    - name: Create symlink for nginx
      become: yes
      file:
        src: /etc/nginx/sites-available/{{ app_name }}
        dest: /etc/nginx/sites-enabled/{{ app_name }}
        state: link
      notify:
      - Restart nginx

    - name: Create symlink for uwsgi
      become: yes
      file:
        src: /etc/uwsgi/apps-available/{{ app_name }}.ini
        dest: /etc/uwsgi/apps-enabled/{{ app_name }}.ini
        state: link

    - name: Creates virtualenv.
      command: >
        virtualenv ~/.envs/{{ app_name }}
        creates="~/.envs/{{ app_name }}"

    - name: Make sure that target directory exists
      become: yes
      file:
        path: /srv/apps/{{ app_name }} 
        state: directory
        owner: "{{ ansible_ssh_user }}"
        group: "{{ ansible_ssh_user }}"

    - name: Clone repository
      git: 
        repo: "{{ repo_url }}"
        dest: /srv/apps/{{ app_name }}
        key_file: ~/.ssh/deployment
        accept_hostkey: yes
        version: "{{ repo_tag  }}"
        force: yes
        update: yes
      notify:
      - Install python requirements
      - Sync DB
      - Collect Static
      - Restart uwsgi


    - name: Copy application config file with env_name
      copy:
        src: ~/Dropbox/ops/envs/{{ env_name }}
        dest: /srv/apps/{{ app_name }}/.env
      when: env_name is defined
      notify:
      - Restart uwsgi

    - name: Copy application config file witt app_name
      copy:
        src: ~/Dropbox/ops/envs/{{ app_name }}
        dest: /srv/apps/{{ app_name }}/.env
      when: env_name is undefined
      notify:
      - Restart uwsgi


  handlers:
    - name: Install python requirements
      pip:
        requirements: /srv/apps/{{ app_name }}/requirements/production.txt
        virtualenv: ~/.envs/{{ app_name }}

    - name: Sync DB
      django_manage:
        command: migrate
        app_path: /srv/apps/{{ app_name }}/
        virtualenv: ~/.envs/{{ app_name }}
        settings: config.settings.production

    - name: Collect Static
      django_manage:
        command: collectstatic
        app_path: /srv/apps/{{ app_name }}/
        virtualenv: ~/.envs/{{ app_name }}
        settings: config.settings.production

    - name: Restart uwsgi
      become: yes
      service: name=uwsgi state=restarted

    - name: Restart nginx
      become: yes
      service: name=nginx state=reloaded

    - name: Deploy scraper
      shell: scrapyd-deploy qscraper
      when: app_name == "qscraper_prod" or app_name == "qscraper_dev"
