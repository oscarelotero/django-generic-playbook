---
- hosts: all

  pre_tasks:
    - name: Update apt cache if needed
      become: yes
      apt: update_cache=yes cache_valid_time=86400
    - name: Verify that the deployment key is present
      copy:
        src: ~/.ssh/deployment
        dest: ~/.ssh/deployment
        mode: 0400

  roles:
    - requirements
    - nginx

  tasks:

    - name: Creates virtualenv.
      command: >
        virtualenv ~/.envs/{{ app_name }}
        creates="~/.envs/{{ app_name }}"

    - name: Make sure that target directory exists
      become: yes
      file:
        path: /srv/apps/{{ app_name }} 
        state: directory
        owner: "{{ ansible_ssh_user }}"
        group: "{{ ansible_ssh_user }}"

    - name: Clone repository
      git: 
        repo: "{{ repo_url }}"
        dest: /srv/apps/{{ app_name }}
        key_file: ~/.ssh/deployment
        accept_hostkey: yes
        version: "{{ repo_tag  }}"
        force: yes
        update: yes
      notify:
      - Install python requirements
      - Sync DB
      - Collect Static
      - Restart uwsgi


    - name: Copy application config file with env_name
      copy:
        src: ~/Dropbox/ops/envs/{{ env_name }}
        dest: /srv/apps/{{ app_name }}/.env
      when: env_name is defined
      notify:
      - Restart uwsgi

    - name: Copy application config file witt app_name
      copy:
        src: ~/Dropbox/ops/envs/{{ app_name }}
        dest: /srv/apps/{{ app_name }}/.env
      when: env_name is undefined
      notify:
      - Restart uwsgi


  handlers:
    - name: Install python requirements
      pip:
        requirements: /srv/apps/{{ app_name }}/requirements/production.txt
        virtualenv: ~/.envs/{{ app_name }}

    - name: Sync DB
      django_manage:
        command: migrate
        app_path: /srv/apps/{{ app_name }}/
        virtualenv: ~/.envs/{{ app_name }}
        settings: config.settings.production

    - name: Collect Static
      django_manage:
        command: collectstatic
        app_path: /srv/apps/{{ app_name }}/
        virtualenv: ~/.envs/{{ app_name }}
        settings: config.settings.production

    - name: Restart uwsgi
      become: yes
      service: name=uwsgi state=restarted

    - name: Restart nginx
      become: yes
      service: name=nginx state=reloaded

    - name: Deploy scraper
      shell: scrapyd-deploy qscraper
      when: app_name == "qscraper_prod" or app_name == "qscraper_dev"
